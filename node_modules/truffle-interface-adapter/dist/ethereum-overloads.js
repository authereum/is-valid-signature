"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
// The ts-ignores are ignoring the checks that are
// saying that web3.eth.getBlock is a function and doesn't
// have a `method` property, which it does
function getBlock(web3) {
    // @ts-ignore
    const _oldFormatter = web3.eth.getBlock.method.outputFormatter;
    // @ts-ignore
    web3.eth.getBlock.method.outputFormatter = block => {
        // @ts-ignore
        let result = _oldFormatter.call(web3.eth.getBlock.method, block);
        // Perhaps there is a better method of doing this,
        // but the raw hexstrings work for the time being
        result.gasLimit = "0x" + new bn_js_1.default(result.gasLimit).toString(16);
        result.gasUsed = "0x" + new bn_js_1.default(result.gasUsed).toString(16);
        return result;
    };
}
exports.getBlock = getBlock;
;
function getTransaction(web3) {
    const _oldTransactionFormatter = 
    // @ts-ignore
    web3.eth.getTransaction.method.outputFormatter;
    // @ts-ignore
    web3.eth.getTransaction.method.outputFormatter = tx => {
        let result = _oldTransactionFormatter.call(
        // @ts-ignore
        web3.eth.getTransaction.method, tx);
        // Perhaps there is a better method of doing this,
        // but the raw hexstrings work for the time being
        result.gas = "0x" + new bn_js_1.default(result.gas).toString(16);
        return result;
    };
}
exports.getTransaction = getTransaction;
;
function getTransactionReceipt(web3) {
    const _oldTransactionReceiptFormatter = 
    // @ts-ignore
    web3.eth.getTransactionReceipt.method.outputFormatter;
    // @ts-ignore
    web3.eth.getTransactionReceipt.method.outputFormatter = receipt => {
        let result = _oldTransactionReceiptFormatter.call(
        // @ts-ignore
        web3.eth.getTransactionReceipt.method, receipt);
        // Perhaps there is a better method of doing this,
        // but the raw hexstrings work for the time being
        result.gasUsed = "0x" + new bn_js_1.default(result.gasUsed).toString(16);
        return result;
    };
}
exports.getTransactionReceipt = getTransactionReceipt;
;
//# sourceMappingURL=ethereum-overloads.js.map