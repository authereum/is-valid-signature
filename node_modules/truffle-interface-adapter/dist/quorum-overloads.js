"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
// The ts-ignores are ignoring the checks that are
// saying that web3.eth.getBlock is a function and doesn't
// have a `method` property, which it does
function getBlock(web3) {
    // @ts-ignore
    const _oldBlockFormatter = web3.eth.getBlock.method.outputFormatter;
    // @ts-ignore
    web3.eth.getBlock.method.outputFormatter = (block) => {
        const _oldTimestamp = block.timestamp;
        const _oldGasLimit = block.gasLimit;
        const _oldGasUsed = block.gasUsed;
        // Quorum uses nanoseconds instead of seconds in timestamp
        let timestamp = new bn_js_1.default(block.timestamp.slice(2), 16);
        timestamp = timestamp.div(new bn_js_1.default(10).pow(new bn_js_1.default(9)));
        block.timestamp = "0x" + timestamp.toString(16);
        // Since we're overwriting the gasLimit/Used later,
        // it doesn't matter what it is before the call
        // The same applies to the timestamp, but I reduced
        // the precision since there was an accurate representation
        // We do this because Quorum can have large block/transaction
        // gas limits
        block.gasLimit = "0x0";
        block.gasUsed = "0x0";
        // @ts-ignore
        let result = _oldBlockFormatter.call(web3.eth.getBlock.method, block);
        // Perhaps there is a better method of doing this,
        // but the raw hexstrings work for the time being
        result.timestamp = _oldTimestamp;
        result.gasLimit = _oldGasLimit;
        result.gasUsed = _oldGasUsed;
        return result;
    };
}
exports.getBlock = getBlock;
;
function getTransaction(web3) {
    const _oldTransactionFormatter = 
    // @ts-ignore
    web3.eth.getTransaction.method.outputFormatter;
    // @ts-ignore
    web3.eth.getTransaction.method.outputFormatter = (tx) => {
        const _oldGas = tx.gas;
        tx.gas = "0x0";
        let result = _oldTransactionFormatter.call(
        // @ts-ignore
        web3.eth.getTransaction.method, tx);
        // Perhaps there is a better method of doing this,
        // but the raw hexstrings work for the time being
        result.gas = _oldGas;
        return result;
    };
}
exports.getTransaction = getTransaction;
;
function getTransactionReceipt(web3) {
    const _oldTransactionReceiptFormatter = 
    // @ts-ignore
    web3.eth.getTransactionReceipt.method.outputFormatter;
    // @ts-ignore
    web3.eth.getTransactionReceipt.method.outputFormatter = (receipt) => {
        const _oldGasUsed = receipt.gasUsed;
        receipt.gasUsed = "0x0";
        let result = _oldTransactionReceiptFormatter.call(
        // @ts-ignore
        web3.eth.getTransactionReceipt.method, receipt);
        // Perhaps there is a better method of doing this,
        // but the raw hexstrings work for the time being
        result.gasUsed = _oldGasUsed;
        return result;
    };
}
exports.getTransactionReceipt = getTransactionReceipt;
;
//# sourceMappingURL=quorum-overloads.js.map